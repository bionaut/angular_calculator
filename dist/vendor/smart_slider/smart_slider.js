// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('smartSlider.module', []).factory('mouseService', function($window, $rootScope) {
    var sId, selected;
    selected = null;
    sId = null;
    angular.element($window).on('mouseup', function(ev) {
      $rootScope.$broadcast('selectedreleased');
      selected = null;
      return sId = null;
    });
    angular.element($window).on('mousemove', function(ev) {
      if (selected) {
        return $rootScope.$broadcast('moveselected', ev.pageX);
      }
    });
    return {
      selected: function(element, id) {
        if (element != null) {
          sId = id;
          return selected = element;
        } else {
          return [selected, sId];
        }
      }
    };
  }).directive('smartSlider', function(mouseService) {
    return {
      scope: {
        min: '=',
        max: '=',
        step: '=',
        current: '=',
        limits: '=?',
        sections: '=?'
      },
      restrict: 'E',
      templateUrl: "vendor/smart_slider/smart_slider.html",
      replace: true,
      controller: function($scope, $element, $timeout) {
        var s;
        s = $scope;
        s.$on('moveselected', function(ev, pageX) {
          var handle, offset, percInPx, targetScope, wrap;
          if (s.$id === mouseService.selected()[1]) {
            targetScope = ev.targetScope;
            handle = mouseService.selected()[0];
            wrap = handle.parent();
            offset = s.getOffset(wrap);
            offset.percentage = offset.width / 100;
            percInPx = (pageX - offset.left) / offset.percentage;
            s.current = s.getValueOfPercentage(percInPx, offset);
            return s.$apply();
          }
        });
        s.$watch('current', function(n) {
          if (n < s.min) {
            s.current = s.min;
          }
          if (n > s.max) {
            return s.current = s.max;
          }
        });
        s.roundNum = function(number, increment, offset) {
          return Math.round((number - offset) / increment) * increment + offset;
        };
        s.getOffset = function(element) {
          var offset;
          offset = element.get(0).getBoundingClientRect();
          return offset;
        };
        s.getPercentage = function(n) {
          var onePerc;
          onePerc = (s.max - s.min) / 100;
          return ((n - s.min) / onePerc) + "%";
        };
        s.getValueOfPercentage = function(perc, offset) {
          var range;
          range = s.max - s.min;
          if (offset != null) {
            return s.roundNum(((perc / 100) * range) + s.min, s.step, 0);
          }
        };
        s.goTo = function(value) {
          if (value != null) {
            s.current = value;
          }
        };
        s.add = function(step) {
          s.current += step;
          if (s.current > s.max) {
            return s.current = s.max;
          }
        };
        s.subtract = function(step) {
          s.current -= step;
          if (s.current < s.min) {
            return s.current = s.min;
          }
        };
        return s.$watch('current', function(n, o) {
          var num, stepDif, _i, _ref, _results;
          if (o !== void 0 || n !== void 0 && s.sections && s.breakpoints === void 0) {
            s.breakpoints = [];
            stepDif = s.max / s.sections;
            _results = [];
            for (num = _i = 1, _ref = s.sections; 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
              if ((num * stepDif) > s.min) {
                _results.push(s.breakpoints.push(s.roundNum(stepDif * num, s.step, 0)));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        });
      }
    };
  }).directive('stopPropagation', function() {
    return function(s, e, a) {
      return e.on('click mousedown', function(e) {
        return e.stopPropagation();
      });
    };
  }).directive('detectClick', function() {
    return function(s, e, a) {
      return e.on('click', function(ev) {
        var offset, percInPx;
        offset = s.getOffset(e);
        offset.percentage = offset.width / 100;
        percInPx = (ev.pageX - offset.left) / offset.percentage;
        s.current = s.getValueOfPercentage(percInPx, offset);
        return s.$apply();
      });
    };
  }).directive('smartHandle', function(mouseService, $rootScope) {
    return function(s, e, a) {
      return e.on('mousedown', function(ev) {
        ev.stopPropagation();
        mouseService.selected(e, s.$id);
        return s.$apply();
      });
    };
  });

}).call(this);
