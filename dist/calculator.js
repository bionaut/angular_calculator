// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('Calculator', ['smartSlider.module']).value('api_offer', 'http://localhost:3000/offer').value('api_constraints', 'http://localhost:3000/constraints').directive('calculator', function($q, $http, api_offer, api_constraints) {
    return {
      restrict: 'E',
      templateUrl: 'partials/calculator_element.html',
      controller: function($scope) {
        var constraints, offer, requestOptions;
        $scope.output = {};
        requestOptions = {
          headers: {
            'Accept': 'application/json; charset=utf-8',
            'Content-Type': 'application/json'
          }
        };
        offer = $http.get(api_offer, requestOptions);
        constraints = $http.get(api_constraints, requestOptions);
        return $q.all([offer, constraints]).then(function(result) {
          var tmp;
          tmp = [];
          return angular.forEach(result, function(response, key, obj) {
            if (response.data.hasOwnProperty('offer')) {
              angular.forEach(response.data.offer.extension_fees, function(value, key) {
                return tmp.push({
                  days: key,
                  price: value
                });
              });
              $scope.output.fees = tmp;
              $scope.output.sidebar = {
                new_interest_before_discount: parseInt(response.data.offer.new_interest_before_discount),
                interest_rate: parseInt(response.data.offer.interest_rate),
                annual_percentage_rate: parseInt(response.data.offer.annual_percentage_rate)
              };
            }
            if (response.data.hasOwnProperty('constraints')) {
              $scope.viewConstraints = response.data;
              $scope.output.amount = {
                current: parseInt(response.data.constraints.default_amount),
                min: parseInt(response.data.constraints.min_amount),
                max: parseInt(response.data.constraints.max_amount),
                step: parseInt(response.data.constraints.amount_step)
              };
              return $scope.output.term = {
                current: parseInt(response.data.constraints.default_term),
                min: parseInt(response.data.constraints.min_term),
                max: parseInt(response.data.constraints.max_term),
                step: parseInt(response.data.constraints.term_step)
              };
            }
          });
        }, function(err) {
          $scope.output.sidebar = {
            new_interest_before_discount: 777,
            interest_rate: 9,
            annual_percentage_rate: 2
          };
          $scope.output.amount = {
            current: 555,
            min: 1000,
            max: 7500,
            step: 100
          };
          return $scope.output.term = {
            current: 6,
            min: 4,
            max: 18,
            step: 1
          };
        });
      }
    };
  }).filter('timestamp', function() {
    return function(input) {
      var now;
      now = new Date().getTime();
      return (input * 24 * 60 * 60 * 1000) + now;
    };
  });

}).call(this);
